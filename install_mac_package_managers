#!/usr/bin/env python

import argparse
import os
import subprocess
import sys

MANAGERS = [
        {
            'name':'xcode-select',
            'cmds' : [ 
                'xcode-select --install'
                ],
            'check': 'xcode-select -p > /dev/null'
        },{
            'name': 'homebrew',
            'cmds': [
                'xcode-select --install',
                '/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"',
            ],
            'check': 'which brew > /dev/null',
        }, {
            'name': 'pip',
            'cmds': [
                'sudo easy_install pip',
            ],
            'check': 'which pip > /dev/null',
        }, {
            'name': 'npm',
            'cmds': [
                'brew install npm',
            ],
            'check': 'which npm > /dev/null',
            'update':'brue update npm'
        }, {
            'name': 'ansible',
            'cmds': ['brew install ansible'],
            'check': 'which ansible-playbook > /dev/null',
            'update':'brew upgrade ansible'
        }]


def parse_args():

    parser = argparse.ArgumentParser(
        description='Installs various programs required for Symbiont development. Most using various package managers'
    )
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='do not actually run the commands')

    parser.add_argument(
        '--force',
        action='store_true',
        help='run install command regardless if already installed')

    for manager in MANAGERS:
        name = manager['name']

        parser.add_argument(
            '--{}'.format(name),
            action='append_const',
            const=name,
            dest='include',
            help='Install just {}'.format(name))

        parser.add_argument(
            '--no-{}'.format(name),
            action='append_const',
            const=name,
            dest='exclude',
            help='Skip installing {}'.format(name))

    args = parser.parse_args()
    return args


def run_cmd(cmd, dry_run, verbose=True):
    if verbose or dry_run:
        print(cmd)

    if dry_run == True:
        return 0
    else:
        ret = subprocess.call(cmd, shell=True)
        return ret
    return 1


def create_check_cmd(name, info):
    pkg = info['pkg']
    if pkg == 'brew':
        return 'brew {} ls {} &> /dev/null'.format(info.get('tap', ''), name)
    elif pkg == 'pip':
        return 'pip show {} &> /dev/null'.format(name)
    elif pkg == 'npm':
        return 'npm list --global {} &> /dev/null'.format(name)
    elif pkg == 'docker':
        return 'docker image inspect {} &>/dev/null'.format(name)
    elif pkg == 'sh':
        return info['check']
    else:
        raise Exception('unknown pkg {} for {}'.format(pkg, name))


def create_install_cmd(name, info):
    pkg = info['pkg']

    if pkg == 'brew':
        return 'brew {} install {}'.format(info.get('tap', ''), name)
    elif pkg == 'pip':
        return 'pip install {}'.format(name)
    elif pkg == 'npm':
        return 'npm install --global {}'.format(name)
    elif pkg == 'docker':
        return 'docker pull {}'.format(name)
    elif pkg == 'sh':
        return info['install']
    else:
        raise Exception('unknown pkg {} for {}'.format(pkg, name))


def main():
    args = parse_args()

    if os.geteuid() == 0:
        sys.exit(
            "sudo/root detected. do not run this script as root. it will prompt you for sudo when/if needed"
        )

    for manager in MANAGERS:
        name = manager['name']

        # if the include array is not null, but the manager name isn't in the list, skip
        if args.include and (name not in args.include):
            continue

        # if the exclude array is not null, and the manager name is in the list, skip
        if args.exclude and (name in args.exclude):
            continue

        return_val = 1
            
        app_installed = (0 == run_cmd(manager['check'], dry_run=False,
         verbose=True))


        if app_installed and 'update' in manager:
            cmd = manager['update']
            run_cmd(cmd, args.dry_run)
        elif not app_installed or args.force:
            for cmd in manager['cmds']:
                run_cmd(cmd, args.dry_run)
        else:
            print('{} already installed'.format(manager['name']))


try:
    main()
except Exception as e:
    print(e.args)
